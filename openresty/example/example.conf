
#lua.conf

server {
    listen  8080;

    server_name  _;

    error_page 404             /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
      root   /usr/example/html;
    }

    location = /50x.html {
      #root   /usr/example/html;
      echo "/50x.html = $status";
    }

    location /lua {
        default_type 'text/html';
        #lua_code_cache off; #生产环境开启
        content_by_lua_file /usr/example/lua/test.lua;
    }

    location ~* \.do {
        set $a gateway;
        rewrite ^ /bar;
    }

    location /foo {
        set $a hello;
        rewrite ^ /bar;
    }

    location /bar {
        echo "a = {$a}";
    }

    location /test {
        echo "uri = $uri";
        echo "request_uri = $request_uri";
        set $orig_a $arg_a;
        set $args "a=5";
        echo "original a: $orig_a";
        echo "a: $arg_a";
    }

    location /lua_version {
        content_by_lua '
            if jit then
                ngx.say(jit.version)
            else
                ngx.say(_VSERSION)
            end
        ';
    }

    location ~ /lua_request/(\d+)/(\d+) {
        set $a $1;
        set $b $host;
        default_type "text/html";
        content_by_lua_file /usr/example/lua/test_request.lua;
        echo_after_body "ngx.var.b $b";
    }

    location /lua_response_1 {
        default_type "text/html";
        content_by_lua_file /usr/example/lua/test_response_1.lua;
    }

    location /lua_response_2 {
        default_type "text/html";
        content_by_lua_file /usr/example/lua/test_response_2.lua;
    }

    location /lua_other {
        default_type "text/html";
        content_by_lua_file /usr/example/lua/test_other.lua;
    }

    location /lua_shared_dict {
        default_type "text/html";
        content_by_lua_file /usr/example/lua/test_lua_shared_dict.lua;
    }

    location /lua_set_1 {
        default_type "text/html";
        set_by_lua_file $num /usr/example/lua/test_set_1.lua;
        echo $num;
    }

    # map指令使用ngx_http_map_module
    # 在http中配置
    location ~ /lua_set_2/sku/(\d+) {
      set $skuId $1;

      set_by_lua $to_book '
          local ngx_match = ngx.re.match
          local var = ngx.var
          local skuId = var.skuId
          local r = var.item_dynamic ~= "1" and ngx_match(skuId, "^[0-9]{8}$")
          if r then return "1" else return "0" end
        ';

      # nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular expression,
      # or inside named location, or inside "if" statement, or inside "limit_except"
      # 加入$args解决错误
        if ($to_book) {
          proxy_pass http://127.0.0.1:8080/foo$args;
        }

        proxy_pass http://127.0.0.1:8082/args$args;
    }

    # 同上，区别在于location不包含正则
    # 获取sku参数方式不同，通过Get传递
    # proxy_pass http://127.0.0.1:8082/args不需要添加$args内置变量
    location /lua_set_2 {
        set $skuId $arg_sku;

        set_by_lua $to_book '
        local ngx_match = ngx.re.match
        local var = ngx.var
        local skuId = var.skuId
        local r = var.item_dynamic ~= "1" and ngx_match(skuId, "^[0-9]{8}$")
        if r then return "1" else return "0" end
        ';

        # nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular expression,
        # or inside named location, or inside "if" statement, or inside "limit_except"
        # 加入$args解决错误
        if ($to_book) {
            proxy_pass http://127.0.0.1:8080/foo$args;
        }

        proxy_pass http://127.0.0.1:8082/args;
    }

    location /lua_rewrite_1 {
        default_type "text/html";
        rewrite_by_lua_file /usr/example/lua/test_rewrite_1.lua;
        echo "no rewrite";
    }

    location /lua_rewrite_2 {
        default_type "text/html";
        rewrite_by_lua_file /usr/example/lua/test_rewrite_2.lua;
        echo "rewrite2 uri : $uri, a : $arg_a";
    }

    location /lua_rewrite_3 {
        default_type "text/html";
        rewrite_by_lua_file /usr/example/lua/test_rewrite_3.lua;
        echo "rewrite3 uri : $uri";
    }

    location /lua_access {
        default_type "text/html";
        access_by_lua_file /usr/example/lua/test_access.lua;
        echo "access";
    }

    location /lua_module_1 {
        default_type "text/html";
        lua_code_cache on;
        content_by_lua_file /usr/example/lua/test_module_1.lua;
    }

    location /lua_redis_basic {
        default_type "text/html";
        lua_code_cache on;
        content_by_lua_file /usr/example/lua/test_redis_basic.lua;
    }

    location /lua_redis_pipeline {
        default_type "text/html";
        lua_code_cache on;
        content_by_lua_file /usr/example/lua/test_redis_pipeline.lua;
    }

    location /lua_redis_script {
        default_type "text/html";
        lua_code_cache on;
    }

    location /lua_mysql {
        default_type "text/html";
        lua_code_cache on;
        content_by_lua_file /usr/example/lua/test_mysql.lua;
    }

    # limit_rate
    location /lua_limit {
        access_by_lua_file /usr/example/lua/limit/rate.lua;
    }

    location /upload {
        rewrite_by_lua_file /usr/example/lua/fs/auth.lua;
        #rewrite /upload?(.*) /upload/img?$1 last;
        error_log  logs/upload_rewrite_error.log  info;
    }

    location /upload/img {
        default_type "application/octet-stream";

        client_max_body_size 1024k;
        client_body_buffer_size 1024k;

        #lua_need_request_body on;

        #访问限制
        #access_by_lua_file /usr/example/lua/fs/auth.lua;
        #上传操作
        content_by_lua_file /usr/example/lua/fs/upload.lua;
        #日志
        error_log  logs/upload_error.log  info;
        access_log logs/upload_access.log upload;
    }

#    location ~ /download/.*\.(gif|jpg|jpeg|png) {
#    location ~ /download/(.*) {
#        default_type application/octet-stream;
#        root /usr/example;
#        content_by_lua_file /usr/example/lua/download_file.lua;
#    }

    # 虚拟目录
    location /download/index {
        autoindex on; # 索引
        autoindex_exact_size off; # 显示文件大小
        autoindex_localtime on;  # 显示文件时间
        alias /usr/example/download; # 源目录
    }

    location /images {
        default_type "text/html";
        echo "/images/";
    }

    location /images/abc {
        default_type "text/html";
        echo "/images/abc";
    }

    location ~ /images/abc {
        default_type "text/html";
        echo "~ /images/abc";
    }

    location ~ /lua_cjson {
        default_type 'text/html';
        lua_code_cache on;
        content_by_lua_file /usr/example/lua/test_cjson.lua;
    }

    location /test1 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua '
            ngx.print("test1 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test1")
        ';
    }

    location /test2 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua '
            ngx.print("test2 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test2")
        ';
    }

    location /test3 {
        lua_socket_connect_timeout 3s;
        lua_socket_send_timeout 3s;
        lua_socket_read_timeout 3s;
        lua_socket_pool_size 100;
        lua_socket_keepalive_timeout 60s;
        lua_socket_buffer_size 8k;

        content_by_lua '
            local res1, res2 = ngx.location.capture_multi({
                { "/test1", { args = ngx.req.get_uri_args() }},
                { "/test2", { args = ngx.req.get_uri_args() }}
            })
            if res1.status == ngx.HTTP_OK then
                 ngx.print(res1.body)
            end
            ngx.print(",")
            if res2.status == ngx.HTTP_OK then
                 ngx.print(res2.body)
            end
            if res2.status ~= ngx.HTTP_OK then
                 --记录错误
            end
        ';
    }
}

server {
    listen    8081;

    location  /test {
        set $args "foo=1&bar=2";
        proxy_pass "http://127.0.0.1:8082/args";
    }
}

server {
    listen    8082;

    location  /args {
        echo "args: $args";
    }
}